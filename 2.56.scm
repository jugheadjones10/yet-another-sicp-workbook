;Exercise 2.56 to 2.58

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp) (if (same-variable? exp var) 1 0))
        ((sum? exp) (make-sum (deriv (addend exp) var)
                              (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product (multiplier exp)
                        (deriv (multiplicand exp) var))
          (make-product (multiplicand exp)
                        (deriv (multiplier exp) var))))
        ((exponentiation? exp)
         (make-product (exponent exp)
                       (make-product (make-exponentiation (base exp) (make-sum (exponent exp) -1))
                                     (deriv (base exp) var))))
        (else
         (error "unknown expression type: DERIV" exp))))

(define (variable? x) (symbol? x))
(define (same-variable? x y) (and (variable? x) (variable? y) (eq? x y)))
(define (=number? exp y) (and (number? exp) (= exp y)))

;Haven't changed exponentiation to standard algebaric notation yet
(define (exponentiation? x) (and (pair? x) (eq? (car x) '**)))
(define (make-exponentiation x y)
  (cond ((=number? y 0) 1)
        ((=number? y 1) x)
        (else (list '** x y))))
(define (base x) (cadr x))
(define (exponent x) (caddr x))

;Utility functions
(define (check list item)
  (if (pair? list)
      (if (eq? (car list) item)
          #t
          (check (cdr list) item))
      #f))
(define (split-here list marker front?)
  (if front?
      (if (eq? (car list) marker)
          '()
          (cons (car list) (split-here (cdr list) marker front?)))
      (if (eq? (car list) marker)
          (cdr list)
          (split-here (cdr list) marker front?))))

(define (sum? x)
  (and (pair? x)
       (check x '+)))
(define (make-sum x y)
  (cond ((=number? x 0) y)
        ((=number? y 0) x)
        ((and (number? x) (number? y)) (+ x y))
        (else (list x '+ y))))
(define (addend x)
  (let ((x (split-here x '+ #t)))
    (if (= (length x) 1)
        (car x)
        x)))
(define (augend x)
  (let ((x (split-here x '+ #f)))
    (if (= (length x) 1)
        (car x)
        x)))
;(define (augend x)
;  (if (pair? (cdddr x))
;      (make-sum (caddr x) (cadddr x))
;      (caddr x)))

(define (product? x)
  (and (pair? x)
       (check x '*)
       (not (check x '+))))
(define (make-product x y)
  (cond ((or (=number? x 0) (=number? y 0)) 0)
        ((=number? x 1) y)
        ((=number? y 1) x)
        ((and (number? x) (number? y)) (* x y))
        (else (list x '* y))))
(define (multiplier x)
  (let ((x (split-here x '* #t)))
    (if (= (length x) 1)
        (car x)
        x)))
(define (multiplicand x)
  (let ((x (split-here x '* #f)))
    (if (= (length x) 1)
        (car x)
        x)))
;(define (multiplicand x)
;  (if (pair? (cdddr x))
;      (make-product (caddr x) (cadddr x))
;      (caddr x)))
